const LineAdapter = require('../adapters/line-adapter');
const VideoService = require('../core/video-service');
const UserService = require('../core/user-service');
const MessageTemplates = require('../utils/message-templates');
const db = require('../config/database');

/**
 * ‰∫ã‰ª∂Â§ÑÁêÜÂçèË∞ÉÂô® - ÂçèË∞ÉLINE AdapterÂíå‰∏öÂä°ÈÄªËæëÂ±Ç
 * ËÅåË¥£ÔºöÊé•Êî∂LINE‰∫ã‰ª∂ÔºåË∞ÉÁî®‰∏öÂä°ÊúçÂä°ÔºåËøîÂõûÂìçÂ∫îÊ∂àÊÅØ
 */
class EventHandler {
  constructor() {
    this.lineAdapter = new LineAdapter();
    this.videoService = new VideoService(db);
    this.userService = new UserService(db);
  }

  /**
   * Â§ÑÁêÜÁî®Êà∑ÂÖ≥Ê≥®‰∫ã‰ª∂
   */
  async handleFollow(event) {
    try {
      const userId = event.source.userId;
      console.log('üëã Êñ∞Áî®Êà∑Ê∑ªÂä†Â•ΩÂèã:', userId);

      // Ëé∑ÂèñÁî®Êà∑profile
      const profile = await this.lineAdapter.getUserProfile(userId);
      
      // ‰∏öÂä°ÈÄªËæëÔºöÂ§ÑÁêÜÁî®Êà∑ÂÖ≥Ê≥®
      const followResult = await this.userService.handleUserFollow(userId, profile.displayName);
      
      if (!followResult.success) {
        throw new Error(followResult.error);
      }

      // ÂèëÈÄÅÊ¨¢ËøéÊ∂àÊÅØ
      const welcomeMessage = MessageTemplates.createWelcomeMessage();
      await this.lineAdapter.replyMessage(event.replyToken, welcomeMessage);

      // Á°Æ‰øùÁî®Êà∑ÊúâRich Menu
      await this.lineAdapter.ensureUserHasRichMenu(userId);

      // ÂèëÈÄÅÊºîÁ§∫ËßÜÈ¢ëÈÄâÈ°π
      try {
        await this.sendDemoVideos(userId);
        console.log('‚úÖ ÊºîÁ§∫ËßÜÈ¢ëÈÄâÈ°πÂèëÈÄÅÊàêÂäü');
      } catch (demoError) {
        console.error('‚ùå ÂèëÈÄÅÊºîÁ§∫ËßÜÈ¢ëÈÄâÈ°πÂ§±Ë¥•:', demoError);
        // ÂèëÈÄÅÁÆÄÂåñÁâàÊú¨
        await this.lineAdapter.pushMessage(userId, 
          MessageTemplates.createTextMessage('üéÅ ÁÑ°Êñô‰ΩìÈ®ì„Çí„ÅîÂ∏åÊúõ„ÅÆÂ†¥Âêà„ÅØ„ÄÅ‰∏ãÈÉ®„É°„Éã„É•„Éº„Åã„Çâ„ÅäÊ∞óËªΩ„Å´„ÅäÈÅ∏„Å≥„Åè„Å†„Åï„ÅÑÔºÅ')
        );
      }

      return { success: true };
    } catch (error) {
      console.error('‚ùå Â§ÑÁêÜÁî®Êà∑ÂÖ≥Ê≥®Â§±Ë¥•:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * Â§ÑÁêÜÊñáÊú¨Ê∂àÊÅØ
   */
  async handleTextMessage(event) {
    try {
      const userId = event.source.userId;
      const messageText = event.message.text;

      console.log(`üìù Êî∂Âà∞ÊñáÊú¨Ê∂àÊÅØ: ${messageText} from ${userId}`);

      // Ëé∑ÂèñÁî®Êà∑‰ø°ÊÅØ
      const user = await this.userService.getUserWithState(userId);
      if (!user) {
        await this.lineAdapter.replyMessage(event.replyToken, 
          MessageTemplates.createErrorMessage('system')
        );
        return { success: false, error: 'User not found' };
      }

      // Ë∞ÉËØïÂëΩ‰ª§
      if (messageText === 'ÁãÄÊÖã' || messageText === 'debug') {
        const debugInfo = await this.userService.generateUserDebugInfo(user);
        await this.lineAdapter.replyMessage(event.replyToken, 
          MessageTemplates.createTextMessage(debugInfo)
        );
        return { success: true };
      }

      // Ê†πÊçÆÁî®Êà∑Áä∂ÊÄÅÂ§ÑÁêÜÊ∂àÊÅØ
      switch (user.current_state) {
        case 'awaiting_custom_prompt':
          return await this.handleCustomPromptInput(event, user, messageText);
          
        case 'awaiting_photo':
          const photoUploadMessage = this.lineAdapter.createPhotoUploadQuickReply('üì∏ ÂÜôÁúü„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö');
          await this.lineAdapter.replyMessage(event.replyToken, photoUploadMessage);
          return { success: true };

        default:
          await this.lineAdapter.replyMessage(event.replyToken, 
            MessageTemplates.createTextMessage('ü§î Áî≥„ÅóË®≥„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÇ‰∏ãÈÉ®„ÅÆ„É°„Éã„É•„Éº„Åã„Çâ„ÅîÂà©Áî®„Åè„Å†„Åï„ÅÑ„ÄÇ')
          );
          return { success: true };
      }
    } catch (error) {
      console.error('‚ùå Â§ÑÁêÜÊñáÊú¨Ê∂àÊÅØÂ§±Ë¥•:', error);
      await this.lineAdapter.replyMessage(event.replyToken, 
        MessageTemplates.createErrorMessage('general')
      );
      return { success: false, error: error.message };
    }
  }

  /**
   * Â§ÑÁêÜÂõæÁâáÊ∂àÊÅØ
   */
  async handleImageMessage(event) {
    try {
      const userId = event.source.userId;
      console.log('üì∏ Êî∂Âà∞ÂõæÁâáÊ∂àÊÅØ:', userId);

      // Ëé∑ÂèñÁî®Êà∑‰ø°ÊÅØ
      const user = await this.userService.getUserWithState(userId);
      if (!user) {
        await this.lineAdapter.replyMessage(event.replyToken, 
          MessageTemplates.createErrorMessage('system')
        );
        return { success: false, error: 'User not found' };
      }

      console.log('üì∏ Áî®Êà∑Áä∂ÊÄÅ:', user.current_state);

      // Ê£ÄÊü•Áî®Êà∑ËÆ¢ÈòÖÈÖçÈ¢ù
      const quota = await this.videoService.checkVideoQuota(user.id);
      if (!quota.hasQuota) {
        const quotaInfo = await this.userService.handleInsufficientQuota(user.id);
        const quotaMessage = MessageTemplates.createInsufficientQuotaCard({
          remaining: quota.remaining,
          total: quota.total,
          planType: quotaInfo.planType,
          needsUpgrade: quotaInfo.needsUpgrade,
          resetDate: quotaInfo.resetDate
        });
        await this.lineAdapter.replyMessage(event.replyToken, quotaMessage);
        // Êé®ÈÄÅËÆ¢ÈòÖÈÄâÈ°πÂç°Áâá
        const planCarousel = MessageTemplates.createPaymentOptionsCarousel();
        await this.lineAdapter.pushMessage(user.line_user_id, planCarousel);
        return { success: true };
      }

      // ‰∏ä‰º†ÂõæÁâá
      const imageUrl = await this.lineAdapter.uploadImage(event.message.id);
      if (!imageUrl) {
        await this.lineAdapter.replyMessage(event.replyToken, 
          MessageTemplates.createErrorMessage('image_upload')
        );
        return { success: false, error: 'Image upload failed' };
      }

      console.log('‚úÖ ÂõæÁâá‰∏ä‰º†ÊàêÂäü:', imageUrl);

      // Ê†πÊçÆÁî®Êà∑Áä∂ÊÄÅÂÜ≥ÂÆöÂêéÁª≠ÊµÅÁ®ã
      const prompts = this.videoService.getPresetPrompts();
      
      switch (user.current_state) {
        case 'awaiting_wave_photo':
          return await this.showGenerationConfirmation(event, user, imageUrl, prompts.wave);
        case 'awaiting_group_photo':
          return await this.showGenerationConfirmation(event, user, imageUrl, prompts.group);
        case 'awaiting_photo':
          // ‰∏™ÊÄßÂåñÊµÅÁ®ãÔºåÂ∑≤Êúâprompt
          if (user.current_prompt) {
            return await this.showGenerationConfirmation(event, user, imageUrl, user.current_prompt);
          } else {
            return await this.showPromptOptions(event, user, imageUrl);
          }
        default:
          // ÈªòËÆ§ÊÉÖÂÜµÔºöÊòæÁ§∫Âä®‰ΩúÈÄâÊã©
          await this.lineAdapter.replyMessage(event.replyToken, 
            MessageTemplates.createTextMessage('üì∏ ÂÜôÁúü„ÇíÂèó‰ø°„Åó„Åæ„Åó„ÅüÔºÅ\n\n‰∏ãÈÉ®„ÅÆ„É°„Éã„É•„Éº„Åã„ÇâÂãï‰Ωú„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö\n\nüëã ÊâãÊåØ„Çä - Ëá™ÁÑ∂„Å™Êå®Êã∂ÂãïÁîª\nü§ù ÂØÑ„ÇäÊ∑ª„ÅÑ - Ê∏©„Åã„ÅÑÂØÑ„ÇäÊ∑ª„ÅÑÂãïÁîª\nüé® ÂÄãÊÄßÂåñ - „Ç´„Çπ„Çø„É†ÂãïÁîª')
          );
          return { success: true };
      }
    } catch (error) {
      console.error('‚ùå Â§ÑÁêÜÂõæÁâáÊ∂àÊÅØÂ§±Ë¥•:', error);
      await this.lineAdapter.replyMessage(event.replyToken, 
        MessageTemplates.createErrorMessage('image_upload')
      );
      return { success: false, error: error.message };
    }
  }

  /**
   * Â§ÑÁêÜÈùûÂõæÁâáÊñá‰ª∂Ê∂àÊÅØ
   */
  async handleNonImageFile(event) {
    try {
      const fileType = event.message.type;
      let fileTypeText = '';
      
      switch (fileType) {
        case 'video':
          fileTypeText = 'ÂãïÁîª„Éï„Ç°„Ç§„É´';
          break;
        case 'audio':
          fileTypeText = 'Èü≥Â£∞„Éï„Ç°„Ç§„É´';
          break;
        case 'file':
          fileTypeText = '„Éï„Ç°„Ç§„É´';
          break;
        default:
          fileTypeText = '„Éï„Ç°„Ç§„É´';
      }
      
      const message = MessageTemplates.createTextMessage(
        `üìã ${fileTypeText}„ÇíÂèó‰ø°„Åó„Åæ„Åó„Åü„ÄÇ\n\n` +
        `‚ö†Ô∏è ÂãïÁîªÁîüÊàê„Å´„ÅØÁîªÂÉè„Éï„Ç°„Ç§„É´ÔºàJPG„ÄÅPNGÁ≠âÔºâ„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ\n\n` +
        `üì∏ ÁîªÂÉè„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`
      );
      
      await this.lineAdapter.replyMessage(event.replyToken, message);
      return { success: true };
    } catch (error) {
      console.error('‚ùå Â§ÑÁêÜÈùûÂõæÁâáÊñá‰ª∂Â§±Ë¥•:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * Â§ÑÁêÜPostback‰∫ã‰ª∂
   */
  async handlePostback(event) {
    try {
      const userId = event.source.userId;
      const postbackData = this.lineAdapter.parsePostbackData(event.postback.data);

      console.log('üìä Êî∂Âà∞Postback:', postbackData);

      // Ëé∑ÂèñÁî®Êà∑‰ø°ÊÅØ
      let user = await this.userService.getUserWithState(userId);
      if (!user) {
        // Ëá™Âä®ÂàõÂª∫Áî®Êà∑ÔºàÂèØËÉΩÊòØÈáçÊñ∞Âä†Â•ΩÂèãÊàñÊï∞ÊçÆÂ∫ìÁº∫Â§±Ôºâ
        const profile = await this.lineAdapter.getUserProfile(userId).catch(() => ({ displayName: 'User' }));
        await this.userService.ensureUserExists(userId, profile.displayName);
        user = await this.userService.getUserWithState(userId);
      }

      // Ê†πÊçÆactionÁ±ªÂûãÂ§ÑÁêÜ
      switch (postbackData.action) {
        case 'WAVE_VIDEO':
          return await this.handleWaveVideoAction(event, user);
        case 'GROUP_VIDEO':
          return await this.handleGroupVideoAction(event, user);
        case 'PERSONALIZE':
          return await this.handlePersonalizeAction(event, user);
        case 'INPUT_CUSTOM_PROMPT':
          return await this.handleInputCustomPromptAction(event, user);
        case 'RANDOM_PROMPT':
          return await this.handleRandomPromptAction(event, user);
        case 'confirm_generate':
          return await this.handleConfirmGenerate(event, user, postbackData);
        case 'demo_generate':
          return await this.handleDemoGenerate(event, user, postbackData);
        case 'switch_to_main_menu':
          return await this.handleSwitchToMainMenu(event, user);
        case 'COUPON':
          return await this.handleCouponAction(event, user);
        case 'CHANGE_PLAN':
          // ËôïÁêÜË®àÂäÉÊõ¥ÊîπË´ãÊ±ÇÔºåÈ°ØÁ§∫Ë®ÇÈñ±ÈÅ∏È†Ö
          const planCarousel = MessageTemplates.createPaymentOptionsCarousel();
          await this.lineAdapter.replyMessage(event.replyToken, planCarousel);
          return { success: true };
        case 'UPGRADE_TO_STANDARD':
          return await this.handleUpgradeToStandard(event, user);
        case 'CANCEL_UPGRADE':
          return await this.handleCancelUpgrade(event, user);
        case 'NO_PHOTO':
          return await this.handleNoPhotoAction(event, user);
        case 'WEBSITE':
          return await this.handleWebsiteAction(event, user);
        case 'SHARE':
          return await this.handleShareAction(event, user);
        case 'CHECK_STATUS':
          return await this.handleCheckStatusAction(event, user);
        default:
          await this.lineAdapter.replyMessage(event.replyToken, 
            MessageTemplates.createTextMessage('ü§î Áî≥„ÅóË®≥„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÇ‰∏ãÈÉ®„ÅÆ„É°„Éã„É•„Éº„Åã„Çâ„ÅîÂà©Áî®„Åè„Å†„Åï„ÅÑ„ÄÇ')
          );
          return { success: true };
      }
    } catch (error) {
      console.error('‚ùå Â§ÑÁêÜPostbackÂ§±Ë¥•:', error);
      
      // Â∞ùËØïËé∑ÂèñÁî®Êà∑‰ø°ÊÅØÁî®‰∫épushÊ∂àÊÅØÔºåÈÅøÂÖçÈáçÂ§ç‰ΩøÁî®replyToken
      try {
        const userId = event.source.userId;
        await this.lineAdapter.pushMessage(userId, 
          MessageTemplates.createErrorMessage('general')
        );
      } catch (pushError) {
        console.error('‚ùå ÂèëÈÄÅÈîôËØØÊ∂àÊÅØÂ§±Ë¥•:', pushError);
        // Â¶ÇÊûúpush‰πüÂ§±Ë¥•‰∫ÜÔºåÂ∞ùËØïreplyÔºà‰ΩÜÂèØËÉΩ‰ºöÂ§±Ë¥•Ôºâ
        try {
          await this.lineAdapter.replyMessage(event.replyToken, 
            MessageTemplates.createErrorMessage('general')
          );
        } catch (replyError) {
          console.error('‚ùå ReplyÈîôËØØÊ∂àÊÅØ‰πüÂ§±Ë¥•:', replyError);
        }
      }
      
      return { success: false, error: error.message };
    }
  }

  // ===== ÁßÅÊúâËæÖÂä©ÊñπÊ≥ï =====

  /**
   * ÂèëÈÄÅÊºîÁ§∫ËßÜÈ¢ëÈÄâÈ°π
   */
  async sendDemoVideos(userId) {
    try {
      const { trialPhotos } = require('../config/demo-trial-photos');
      
      const introMessage = MessageTemplates.createTextMessage('üéÅ **ÁÑ°Êñô‰ΩìÈ®ì„Çí„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑÔºÅ**\n\nüì∏ ‰∏ãË®ò„ÅÆ„Çµ„É≥„Éó„É´ÂÜôÁúü„Åã„Çâ„ÅäÈÅ∏„Å≥„Åè„Å†„Åï„ÅÑÔºö');
      const carouselMessage = MessageTemplates.createDemoVideoCarousel(trialPhotos);
      
      await this.lineAdapter.pushMessage(userId, [introMessage, carouselMessage]);
      console.log('‚úÖ ÊºîÁ§∫ËßÜÈ¢ëÈÄâÈ°πÂèëÈÄÅÂÆåÊàê');
    } catch (error) {
      console.error('‚ùå ÂèëÈÄÅÊºîÁ§∫ËßÜÈ¢ëÈÄâÈ°πÂ§±Ë¥•:', error);
      throw error;
    }
  }

  /**
   * ÊòæÁ§∫ÁîüÊàêÁ°ÆËÆ§Âç°Áâá
   */
  async showGenerationConfirmation(event, user, imageUrl, prompt) {
    try {
      // Áç≤ÂèñÁî®Êà∂ÈÖçÈ°ç‰ø°ÊÅØ
      const quota = await this.videoService.checkVideoQuota(user.id);
      
      const confirmationCard = MessageTemplates.createGenerationConfirmCard(imageUrl, prompt, quota);
      await this.lineAdapter.replyMessage(event.replyToken, confirmationCard);
      // Â∞áÂúñÁâáËàápromptÊö´Â≠òÊñºÁî®Êà∂ÁãÄÊÖãÔºå‰æõÁ¢∫Ë™çÊåâÈàïÂæåËÆÄÂèñ
      await this.userService.setUserState(
        user.id,
        'awaiting_confirm',
        JSON.stringify({ prompt, imageUrl })
      );
      
      return { success: true };
    } catch (error) {
      console.error('‚ùå ÊòæÁ§∫Á°ÆËÆ§Âç°ÁâáÂ§±Ë¥•:', error);
      throw error;
    }
  }

  /**
   * ÊòæÁ§∫promptÈÄâÈ°πÔºàÁÆÄÂåñÁâàÔºâ
   */
  async showPromptOptions(event, user, imageUrl) {
    try {
      await this.lineAdapter.replyMessage(event.replyToken, 
        MessageTemplates.createTextMessage('üì∏ ÂÜôÁúü„ÇíÂèó‰ø°„Åó„Åæ„Åó„ÅüÔºÅ\n\n‰∏ãÈÉ®„ÅÆ„É°„Éã„É•„Éº„Åã„Çâ„ÄåÂÄãÊÄßÂåñ„Äç„ÇíÈÅ∏Êäû„Åó„Å¶„Éó„É≠„É≥„Éó„Éà„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ')
      );
      return { success: true };
    } catch (error) {
      console.error('‚ùå ÊòæÁ§∫promptÈÄâÈ°πÂ§±Ë¥•:', error);
      throw error;
    }
  }

  // ===== Âä®‰ΩúÂ§ÑÁêÜÊñπÊ≥ï =====

  async handleWaveVideoAction(event, user) {
    // Ê£ÄÊü•Áî®Êà∑ËÆ¢ÈòÖÁä∂ÊÄÅ
    const quota = await this.videoService.checkVideoQuota(user.id);
    if (!quota.hasQuota) {
      await this.lineAdapter.replyMessage(event.replyToken, 
        MessageTemplates.createTextMessage('üôá‚Äç‚ôÄÔ∏è Áî≥„ÅóË®≥„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÇÂãïÁîªÁîüÊàê„Çµ„Éº„Éì„Çπ„Çí„ÅîÂà©Áî®„ÅÑ„Åü„Å†„Åè„Å´„ÅØ„ÄÅ„Åæ„Åö„Éó„É©„É≥„Å´„ÅîÂä†ÂÖ•„ÅÑ„Åü„Å†„ÅèÂøÖË¶Å„Åå„Åî„Åñ„ÅÑ„Åæ„Åô„ÄÇ\n\n‰∏ãË®ò„Åã„Çâ„ÅäÂ•Ω„Åø„ÅÆ„Éó„É©„É≥„Çí„ÅäÈÅ∏„Å≥„Åè„Å†„Åï„ÅÑ„ÄÇ')
      );
      
      // Êé®ÈÄÅËÆ¢ÈòÖÈÄâÈ°πÂç°Áâá
      const planCarousel = MessageTemplates.createPaymentOptionsCarousel();
      await this.lineAdapter.pushMessage(user.line_user_id, planCarousel);
      return { success: true };
    }

    const messages = MessageTemplates.createActionSelectionMessages('wave');
    const photoUploadReply = this.lineAdapter.createPhotoUploadQuickReply();
    
    await this.lineAdapter.replyMessage(event.replyToken, [...messages, photoUploadReply]);
    await this.userService.setUserState(user.id, 'awaiting_wave_photo');
    
    return { success: true };
  }

  async handleGroupVideoAction(event, user) {
    // Ê£ÄÊü•Áî®Êà∑ËÆ¢ÈòÖÁä∂ÊÄÅ
    const quota = await this.videoService.checkVideoQuota(user.id);
    if (!quota.hasQuota) {
      await this.lineAdapter.replyMessage(event.replyToken, 
        MessageTemplates.createTextMessage('üôá‚Äç‚ôÄÔ∏è Áî≥„ÅóË®≥„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÇÂãïÁîªÁîüÊàê„Çµ„Éº„Éì„Çπ„Çí„ÅîÂà©Áî®„ÅÑ„Åü„Å†„Åè„Å´„ÅØ„ÄÅ„Åæ„Åö„Éó„É©„É≥„Å´„ÅîÂä†ÂÖ•„ÅÑ„Åü„Å†„ÅèÂøÖË¶Å„Åå„Åî„Åñ„ÅÑ„Åæ„Åô„ÄÇ\n\n‰∏ãË®ò„Åã„Çâ„ÅäÂ•Ω„Åø„ÅÆ„Éó„É©„É≥„Çí„ÅäÈÅ∏„Å≥„Åè„Å†„Åï„ÅÑ„ÄÇ')
      );
      
      // Êé®ÈÄÅËÆ¢ÈòÖÈÄâÈ°πÂç°Áâá
      const planCarousel = MessageTemplates.createPaymentOptionsCarousel();
      await this.lineAdapter.pushMessage(user.line_user_id, planCarousel);
      return { success: true };
    }

    const messages = MessageTemplates.createActionSelectionMessages('group');
    const photoUploadReply = this.lineAdapter.createPhotoUploadQuickReply();
    
    await this.lineAdapter.replyMessage(event.replyToken, [...messages, photoUploadReply]);
    await this.userService.setUserState(user.id, 'awaiting_group_photo');
    
    return { success: true };
  }

  async handlePersonalizeAction(event, user) {
    // Ê£ÄÊü•Áî®Êà∑ËÆ¢ÈòÖÁä∂ÊÄÅ
    const quota = await this.videoService.checkVideoQuota(user.id);
    if (!quota.hasQuota) {
      await this.lineAdapter.replyMessage(event.replyToken, 
        MessageTemplates.createTextMessage('üôá‚Äç‚ôÄÔ∏è Áî≥„ÅóË®≥„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÇÂãïÁîªÁîüÊàê„Çµ„Éº„Éì„Çπ„Çí„ÅîÂà©Áî®„ÅÑ„Åü„Å†„Åè„Å´„ÅØ„ÄÅ„Åæ„Åö„Éó„É©„É≥„Å´„ÅîÂä†ÂÖ•„ÅÑ„Åü„Å†„ÅèÂøÖË¶Å„Åå„Åî„Åñ„ÅÑ„Åæ„Åô„ÄÇ\n\n‰∏ãË®ò„Åã„Çâ„ÅäÂ•Ω„Åø„ÅÆ„Éó„É©„É≥„Çí„ÅäÈÅ∏„Å≥„Åè„Å†„Åï„ÅÑ„ÄÇ')
      );
      
      // Êé®ÈÄÅËÆ¢ÈòÖÈÄâÈ°πÂç°Áâá
      const planCarousel = MessageTemplates.createPaymentOptionsCarousel();
      await this.lineAdapter.pushMessage(user.line_user_id, planCarousel);
      return { success: true };
    }

    const messages = MessageTemplates.createActionSelectionMessages('personalize');
    
    // Ê∑ªÂä†Quick ReplyÈÄâÈ°π
    messages[0].quickReply = {
      items: [
        {
          type: 'action',
          action: {
            type: 'postback',
            label: 'üé≤ „É©„É≥„ÉÄ„É†„Éó„É≠„É≥„Éó„Éà',
            data: 'action=RANDOM_PROMPT'
          }
        },
        {
          type: 'action',
          action: {
            type: 'postback',
            label: '‚úèÔ∏è Ëá™ÂàÜ„ÅßÂÖ•Âäõ„Åô„Çã',
            data: 'action=INPUT_CUSTOM_PROMPT',
            inputOption: 'openKeyboard'
          }
        }
      ]
    };

    await this.lineAdapter.replyMessage(event.replyToken, messages);
    await this.userService.setUserState(user.id, 'awaiting_custom_prompt_selection');
    
    return { success: true };
  }

  async handleCustomPromptInput(event, user, promptText) {
    const confirmMessage = MessageTemplates.createTextMessage(`‚úÖ „Éó„É≠„É≥„Éó„Éà„ÇíË®≠ÂÆö„Åó„Åæ„Åó„ÅüÔºö\n"${promptText}"`);
    const photoUploadReply = this.lineAdapter.createPhotoUploadQuickReply();
    
    await this.lineAdapter.replyMessage(event.replyToken, [confirmMessage, photoUploadReply]);
    await this.userService.setUserState(user.id, 'awaiting_photo', promptText);
    
    return { success: true };
  }

  async handleRandomPromptAction(event, user) {
    const randomPrompt = this.videoService.generateRandomPrompt();
    const confirmMessage = MessageTemplates.createTextMessage(`‚ú® „É©„É≥„ÉÄ„É†„Éó„É≠„É≥„Éó„ÉàÔºö\n"${randomPrompt}"`);
    const photoUploadReply = this.lineAdapter.createPhotoUploadQuickReply();
    
    await this.lineAdapter.replyMessage(event.replyToken, [confirmMessage, photoUploadReply]);
    await this.userService.setUserState(user.id, 'awaiting_photo', randomPrompt);
    
    return { success: true };
  }

  async handleInputCustomPromptAction(event, user) {
    try {
      // Ë®≠ÁΩÆÁî®Êà∂ÁãÄÊÖãÁÇ∫Á≠âÂæÖËá™ÂÆöÁæ©promptËº∏ÂÖ•
      await this.userService.setUserState(user.id, 'awaiting_custom_prompt');
      
      // ÁôºÈÄÅÁ∞°ÊΩîÁöÑÂºïÂ∞éÊ∂àÊÅØ
      const instructionMessage = MessageTemplates.createTextMessage(
        '‚úèÔ∏è ÂãïÁîª„ÅÆ„Çπ„Çø„Ç§„É´„ÇÑÈõ∞Âõ≤Ê∞ó„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö'
      );
      
      await this.lineAdapter.replyMessage(event.replyToken, instructionMessage);
      
      return { success: true };
    } catch (error) {
      console.error('‚ùå Â§ÑÁêÜËá™ÂÆö‰πâpromptËæìÂÖ•Â§±Ë¥•:', error);
      await this.lineAdapter.replyMessage(event.replyToken, 
        MessageTemplates.createErrorMessage('general')
      );
      return { success: false, error: error.message };
    }
  }

  async handleConfirmGenerate(event, user, data) {
    try {
      // ÂÖàÊ£ÄÊü•Áî®Êà∑ÊòØÂê¶Â∑≤ÊúâÊ≠£Âú®ËøõË°åÁöÑ‰ªªÂä°
      const pendingTasks = await this.videoService.db.getUserPendingTasks(user.line_user_id);
      if (pendingTasks.length > 0) {
        await this.lineAdapter.replyMessage(event.replyToken, {
          type: 'text',
          text: 'üé¨ ÁèæÂú®ÂãïÁîª„ÇíÁîüÊàê‰∏≠„Åß„Åô„ÄÇ„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ...\n\n‚è±Ô∏è ÁîüÊàêÂÆå‰∫Ü„Åæ„Åß‰ªä„Åó„Å∞„Çâ„Åè„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ„ÄÇË§áÊï∞„ÅÆÂãïÁîª„ÇíÂêåÊôÇ„Å´ÁîüÊàê„Åô„Çã„Åì„Å®„ÅØ„Åß„Åç„Åæ„Åõ„Çì„ÄÇ'
        });
        return { success: false, error: 'User already has pending tasks' };
      }

      // Âæû‰ΩøÁî®ËÄÖÁãÄÊÖãÂèñÂá∫Êö´Â≠òË≥áÊñô
      let prompt = null;
      let imageUrl = null;
      try {
        const cached = JSON.parse(user.current_prompt || '{}');
        prompt = cached.prompt;
        imageUrl = cached.imageUrl;
      } catch (_) {}

      // Ê™¢Êü•ÂøÖË¶ÅÂèÉÊï∏ÔºöpromptÂøÖÈ†àÂ≠òÂú®ÔºåimageUrlÂèØ‰ª•ÁÇ∫null
      if (!prompt) {
        await this.lineAdapter.replyMessage(event.replyToken, 
          MessageTemplates.createErrorMessage('video_generation')
        );
        return { success: false, error: 'Missing prompt' };
      }

      // È™åËØÅÂèÇÊï∞
      const validation = this.videoService.validateVideoParams(imageUrl, prompt);
      if (!validation.isValid) {
        await this.lineAdapter.replyMessage(event.replyToken, 
          MessageTemplates.createErrorMessage('video_generation')
        );
        return { success: false, error: validation.errors.join(', ') };
      }

      // Á´ãÂç≥ÂõûË¶ÜÈñãÂßãÁîüÊàê‰∏¶ÂàáÊèõÂà∞processing menu
      const startMessage = MessageTemplates.createVideoStatusMessages('starting');
      await this.lineAdapter.replyMessage(event.replyToken, startMessage);
      
      // Á´ãÂç≥ÂàáÊèõÂà∞ËôïÁêÜ‰∏≠ËèúÂñÆÔºå‰∏çÁÆ°Áî®Êà∂Áï∂ÂâçÁãÄÊÖã
      await this.lineAdapter.switchToProcessingMenu(user.line_user_id);

      // ÂàõÂª∫ÂíåÂêØÂä®ËßÜÈ¢ë‰ªªÂä°
      const subscription = await this.userService.getUserSubscription(user.id);
      const taskResult = await this.videoService.createVideoTask(user.id, {
        imageUrl,
        prompt,
        subscriptionId: subscription?.id
      });

      if (taskResult.success) {
        await this.videoService.startVideoGeneration(
          taskResult.videoRecordId, 
          user.line_user_id, 
          imageUrl, 
          prompt
        );
      }

      // ËÆ∞ÂΩï‰∫§‰∫í
      await this.userService.logUserInteraction(user.line_user_id, user.id, 'video_generation_started', {
        imageUrl, prompt, videoRecordId: taskResult.videoRecordId
      });

      // Ê∏ÖÈô§Áî®Êà∑Áä∂ÊÄÅ
      await this.userService.clearUserState(user.id);

      return { success: true };
    } catch (error) {
      console.error('‚ùå Â§ÑÁêÜÁ°ÆËÆ§ÁîüÊàêÂ§±Ë¥•:', error);
      await this.lineAdapter.replyMessage(event.replyToken, 
        MessageTemplates.createErrorMessage('video_generation')
      );
      return { success: false, error: error.message };
    }
  }

  async handleDemoGenerate(event, user, data) {
    try {
      const photoId = data.photo_id;
      
      const processingMessage = MessageTemplates.createVideoStatusMessages('processing');
      await this.lineAdapter.replyMessage(event.replyToken, processingMessage);
      
      // ÂàáÊç¢Âà∞Â§ÑÁêÜ‰∏≠ËèúÂçï
      await this.lineAdapter.switchToProcessingMenu(user.line_user_id);

      // ÁîüÊàêÊºîÁ§∫ËßÜÈ¢ë
      const demoResult = await this.videoService.generateDemoVideo(photoId);
      
      if (demoResult.success) {
        const completedMessages = MessageTemplates.createVideoStatusMessages('demo_completed', {
          videoUrl: demoResult.videoUrl,
          thumbnailUrl: demoResult.thumbnailUrl
        });
        
        await this.lineAdapter.pushMessage(user.line_user_id, completedMessages);
      } else {
        await this.lineAdapter.pushMessage(user.line_user_id, 
          MessageTemplates.createErrorMessage('video_generation')
        );
      }
      
      // ÂàáÊç¢Âõû‰∏ªËèúÂçï
      await this.lineAdapter.switchToMainMenu(user.line_user_id);
      
      return { success: true };
    } catch (error) {
      console.error('‚ùå Â§ÑÁêÜÊºîÁ§∫ÁîüÊàêÂ§±Ë¥•:', error);
      return { success: false, error: error.message };
    }
  }

  async handleCouponAction(event, user) {
    try {
      // Ê™¢Êü•Áî®Êà∂Ë®ÇÈñ±ÁãÄÊÖã
      const subscription = await this.userService.getUserSubscription(user.id);
      
      if (!subscription) {
        // Ê≤íÊúâË®ÇÈñ±ÔºåÈ°ØÁ§∫Ë®ÇÈñ±Ë®àÂäÉÈÅ∏È†Ö
        const planCarousel = MessageTemplates.createPaymentOptionsCarousel();
        await this.lineAdapter.replyMessage(event.replyToken, planCarousel);
      } else {
        // Â∑≤ÊúâË®ÇÈñ±ÔºåÈ°ØÁ§∫Áï∂ÂâçÁãÄÊÖã
        if (subscription.plan_type === 'standard') {
          // Standard Áî®Êà∂ÔºåÂÉÖÈ°ØÁ§∫ÁãÄÊÖã
          const statusMessage = MessageTemplates.createSubscriptionStatusMessage(subscription);
          await this.lineAdapter.replyMessage(event.replyToken, statusMessage);
        } else if (subscription.plan_type === 'trial') {
          // Trial Áî®Êà∂ÔºåË©¢ÂïèÊòØÂê¶ÂçáÁ¥ö
          const upgradeCard = MessageTemplates.createUpgradePromptCard(subscription);
          await this.lineAdapter.replyMessage(event.replyToken, upgradeCard);
        }
      }
      
      return { success: true };
    } catch (error) {
      console.error('‚ùå ËôïÁêÜÂÑ™ÊÉ†Âà∏Âãï‰ΩúÂ§±Êïó:', error);
      await this.lineAdapter.replyMessage(event.replyToken, 
        MessageTemplates.createErrorMessage('system_error')
      );
      return { success: false, error: error.message };
    }
  }

  async handleWebsiteAction(event, user) {
    const websiteCard = MessageTemplates.createWebsiteCard();
    await this.lineAdapter.replyMessage(event.replyToken, websiteCard);
    return { success: true };
  }

  async handleShareAction(event, user) {
    const shareCard = MessageTemplates.createShareCard();
    await this.lineAdapter.replyMessage(event.replyToken, shareCard);
    return { success: true };
  }

  async handleUpgradeToStandard(event, user) {
    try {
      // È°ØÁ§∫ Standard Plan Ë®ÇÈñ±ÈÅ∏È†Ö
      const standardUrl = process.env.STRIPE_STANDARD_URL || 'https://buy.stripe.com/bJe9AS843aNUd5t5Ubcs807';
      
      const upgradeMessage = {
        type: 'flex',
        altText: '‚¨ÜÔ∏è Standard Plan ÂçáÁ¥ö',
        contents: {
          type: 'bubble',
          body: {
            type: 'box',
            layout: 'vertical',
            contents: [
              {
                type: 'text',
                text: '‚¨ÜÔ∏è Standard Plan',
                weight: 'bold',
                size: 'xl',
                color: '#42C76A'
              },
              {
                type: 'text',
                text: '¬•2,980/Êúà„Åß100Êú¨„ÅÆÂãïÁîªÁîüÊàê',
                size: 'md',
                color: '#666666',
                margin: 'md'
              }
            ]
          },
          footer: {
            type: 'box',
            layout: 'vertical',
            contents: [
              {
                type: 'button',
                style: 'primary',
                color: '#42C76A',
                action: {
                  type: 'uri',
                  label: '‰ªä„Åô„Åê„Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„Éâ',
                  uri: standardUrl
                }
              }
            ]
          }
        }
      };
      
      await this.lineAdapter.replyMessage(event.replyToken, upgradeMessage);
      return { success: true };
    } catch (error) {
      console.error('‚ùå ËôïÁêÜÂçáÁ¥öÂ§±Êïó:', error);
      return { success: false, error: error.message };
    }
  }

  async handleCancelUpgrade(event, user) {
    try {
      const cancelMessage = MessageTemplates.createTextMessage('‚úÖ „Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„Éâ„Çí„Ç≠„É£„É≥„Çª„É´„Åó„Åæ„Åó„Åü„ÄÇ\n\nÁèæÂú®„ÅÆTrial Plan„ÇíÂºï„ÅçÁ∂ö„Åç„ÅîÂà©Áî®„Åè„Å†„Åï„ÅÑ„ÄÇ');
      await this.lineAdapter.replyMessage(event.replyToken, cancelMessage);
      return { success: true };
    } catch (error) {
      console.error('‚ùå ËôïÁêÜÂèñÊ∂àÂçáÁ¥öÂ§±Êïó:', error);
      return { success: false, error: error.message };
    }
  }

  async handleNoPhotoAction(event, user) {
    try {
      // Ê™¢Êü•Áî®Êà∂ÊòØÂê¶Êúâ prompt
      if (!user.current_prompt) {
        await this.lineAdapter.replyMessage(event.replyToken, 
          MessageTemplates.createErrorMessage('system_error')
        );
        return { success: false, error: 'No prompt found' };
      }
      
      // Áç≤ÂèñÁî®Êà∂ÈÖçÈ°ç‰ø°ÊÅØ
      const quota = await this.videoService.checkVideoQuota(user.id);
      
      // ‰ΩøÁî® null ‰ΩúÁÇ∫ imageUrlÔºåÈ°ØÁ§∫Á¢∫Ë™çÂç°Áâá
      const confirmationCard = MessageTemplates.createGenerationConfirmCard(null, user.current_prompt, quota);
      await this.lineAdapter.replyMessage(event.replyToken, confirmationCard);
       
      // Â∞á prompt Âíå ÁÑ°ÂúñÁâá ÁãÄÊÖãÊö´Â≠ò
      await this.userService.setUserState(
        user.id,
        'awaiting_confirm',
        JSON.stringify({ prompt: user.current_prompt, imageUrl: null })
      );
      
      return { success: true };
    } catch (error) {
      console.error('‚ùå ËôïÁêÜNo PhotoÂãï‰ΩúÂ§±Êïó:', error);
      await this.lineAdapter.replyMessage(event.replyToken, 
        MessageTemplates.createErrorMessage('system_error')
      );
      return { success: false, error: error.message };
    }
  }

  async handleCheckStatusAction(event, user) {
    try {
      // ÁôºÈÄÅÊ≠£Âú®Ê™¢Êü•ÈÄ≤Â∫¶ÁöÑÊ∂àÊÅØ
      await this.lineAdapter.replyMessage(event.replyToken, 
        MessageTemplates.createTextMessage('üîÑ ÂãïÁîªÁîüÊàê„ÅÆÈÄ≤Êçó„ÇíÁ¢∫Ë™ç‰∏≠„Åß„Åô...')
      );
      
      // È¶ñÂÖàÊ£ÄÊü•Áî®Êà∑ÊòØÂê¶ÊúâÊ≠£Âú®ËøõË°åÁöÑËßÜÈ¢ë‰ªªÂä°
      const db = require('../config/database');
      const pendingTasks = await db.getUserPendingTasks(user.line_user_id);
      
      if (pendingTasks.length === 0) {
        // Ê≤°ÊúâÊ≠£Âú®ÁîüÊàêÁöÑËßÜÈ¢ëÔºåÂàáÊç¢Âà∞‰∏ªËèúÂçïÂπ∂ÊèêÁ§∫
        await this.lineAdapter.switchToMainMenu(user.line_user_id);
        
        await this.lineAdapter.pushMessage(user.line_user_id, 
          MessageTemplates.createTextMessage('üì± ÁèæÂú®ÁîüÊàê‰∏≠„ÅÆÂãïÁîª„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ\n\n„É°„Ç§„É≥„É°„Éã„É•„Éº„Å´Êàª„Çä„Åæ„Åó„Åü„ÄÇ')
        );
        
        return { success: true, message: 'No pending tasks, switched to main menu' };
      }
      
      // Ê™¢Êü•Ë©≤Áî®Êà∂ÁöÑÂæÖËôïÁêÜË¶ñÈ†ª‰ªªÂãô
      const lineAdapter = this.lineAdapter; // ‰øùÂ≠òthisÂºïÁî®
      const videoGenerator = new (require('../services/video-generator'))(
        require('../config/database'),
        async (eventType, data) => {
          if (eventType === 'video_completed') {
            const { lineUserId, videoUrl, thumbnailUrl } = data;
            const message = {
              type: 'video',
              originalContentUrl: videoUrl,
              previewImageUrl: thumbnailUrl || videoUrl
            };
            
            await lineAdapter.pushMessage(lineUserId, [
              { type: 'text', text: '‚úÖ ÂãïÁîªÁîüÊàê„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ' },
              message
            ]);
            
            // ÂàáÊèõÂõû‰∏ªËèúÂñÆ
            try {
              const switchResult = await lineAdapter.switchToMainMenu(lineUserId);
              console.log('üìã Ë¶ñÈ†ªÂÆåÊàêÂæåËèúÂñÆÂàáÊèõÁµêÊûú:', switchResult);
            } catch (menuError) {
              console.error('‚ùå Ë¶ñÈ†ªÂÆåÊàêÂæåËèúÂñÆÂàáÊèõÂ§±Êïó:', menuError);
            }
          } else if (eventType === 'video_failed') {
            const { lineUserId, errorMessage, quotaRestored } = data;
            
            // ÂàõÂª∫ÂåÖÂê´ÈÖçÈ¢ù‰ø°ÊÅØÁöÑÂ§±Ë¥•Ê∂àÊÅØ
            let failedText = '‚ùå Áî≥„ÅóË®≥„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÇÂãïÁîªÁîüÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ\n\n';
            
            // Ê∑ªÂä†ÂÖ∑‰ΩìÈîôËØØ‰ø°ÊÅØÔºàÂ¶ÇÊûúÊúâÁöÑËØùÔºâ
            if (errorMessage && errorMessage !== 'ËßÜÈ¢ëÁîüÊàêÂ§±Ë¥•' && errorMessage !== 'Á≥ªÁªüÈîôËØØÔºåËØ∑Á®çÂêéÂÜçËØï') {
              failedText += `Ë©≥Á¥∞: ${errorMessage}\n\n`;
            }
            
            // ÈáçË¶ÅÔºöÊ∑ªÂä†ÈÖçÈ¢ùÊú™Êâ£Èô§ÁöÑÊèêÁ§∫
            if (quotaRestored) {
              failedText += '‚úÖ „ÅîÂÆâÂøÉ„Åè„Å†„Åï„ÅÑ„ÄÇ‰ªäÂõû„ÅÆÁîüÊàê„ÅßÂà©Áî®Êû†„ÅØÊ∂àË≤ª„Åï„Çå„Å¶„Åä„Çä„Åæ„Åõ„Çì„ÄÇ\n\n';
            }
            
            failedText += 'üîÑ „Åó„Å∞„Çâ„Åè„Åó„Å¶„Åã„ÇâÂÜçÂ∫¶„ÅäË©¶„Åó„ÅÑ„Åü„Å†„Åè„Åã„ÄÅÂà•„ÅÆÂÜôÁúü„Åß„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ';
            
            await lineAdapter.pushMessage(lineUserId, [{
              type: 'text',
              text: failedText
            }]);
            
            // ÂàáÊèõÂõû‰∏ªËèúÂñÆ
            try {
              const switchResult = await lineAdapter.switchToMainMenu(lineUserId);
              console.log('üìã Ë¶ñÈ†ªÂ§±ÊïóÂæåËèúÂñÆÂàáÊèõÁµêÊûú:', switchResult);
            } catch (menuError) {
              console.error('‚ùå Ë¶ñÈ†ªÂ§±ÊïóÂæåËèúÂñÆÂàáÊèõÂ§±Êïó:', menuError);
            }
          }
        }
      );
      
      // Ê™¢Êü•Áî®Êà∂ÁöÑÂæÖËôïÁêÜ‰ªªÂãô
      await videoGenerator.checkPendingTasks(user.line_user_id);
      
      return { success: true };
    } catch (error) {
      console.error('‚ùå ËôïÁêÜÁãÄÊÖãÁ¢∫Ë™çÂ§±Êïó:', error);
      // ‰ΩøÁî® push ËÄå‰∏çÊòØ replyÔºåÂõ†‰∏∫ replyToken ÂèØËÉΩÂ∑≤ÁªèË¢´‰ΩøÁî®Ëøá‰∫Ü
      await this.lineAdapter.pushMessage(user.line_user_id, 
        MessageTemplates.createTextMessage('‚ùå ÈÄ≤ÊçóÁ¢∫Ë™ç‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ„Åó„Å∞„Çâ„Åè„Åó„Å¶„Åã„ÇâÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ')
      );
      return { success: false, error: error.message };
    }
  }

  async handleSwitchToMainMenu(event, user) {
    try {
      await this.lineAdapter.switchToMainMenu(user.line_user_id);
      return { success: true };
    } catch (error) {
      console.error('‚ùå ÂàáÊç¢Âà∞‰∏ªËèúÂçïÂ§±Ë¥•:', error);
      await this.lineAdapter.replyMessage(event.replyToken, 
        MessageTemplates.createErrorMessage('system_error')
      );
      return { success: false, error: error.message };
    }
  }
}

module.exports = EventHandler; 