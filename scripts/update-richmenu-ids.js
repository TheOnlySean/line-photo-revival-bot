const { Client } = require('@line/bot-sdk');
const fs = require('fs');
const path = require('path');
const lineConfig = require('../config/line-config');

// 创建LINE客户端
const client = new Client({
  channelSecret: lineConfig.channelSecret,
  channelAccessToken: lineConfig.channelAccessToken
});

async function updateRichMenuIds() {
  console.log('🔍 获取当前Rich Menu信息...');
  
  try {
    // 获取所有Rich Menu
    const richMenuList = await client.getRichMenuList();
    console.log(`📋 找到 ${richMenuList.length} 个Rich Menu`);
    
    let mainMenuId = null;
    let processingMenuId = null;
    
    // 识别各个菜单
    for (const menu of richMenuList) {
      console.log(`📋 菜单: ${menu.name} (${menu.richMenuId})`);
      
      if (menu.name.includes('Main') || menu.name.includes('主要') || menu.name.includes('メイン')) {
        mainMenuId = menu.richMenuId;
        console.log('🎯 主菜单ID:', mainMenuId);
      } else if (menu.name.includes('Processing') || menu.name.includes('生成中') || menu.name.includes('処理中')) {
        processingMenuId = menu.richMenuId;
        console.log('🎯 处理中菜单ID:', processingMenuId);
      }
    }
    
    if (!mainMenuId || !processingMenuId) {
      console.error('❌ 无法找到完整的Rich Menu ID');
      return;
    }
    
    // 更新services/line-bot.js中的Rich Menu ID设置
    console.log('\n📝 更新代码中的Rich Menu ID...');
    
    const lineBotPath = path.join(__dirname, '../services/line-bot.js');
    let lineBotContent = fs.readFileSync(lineBotPath, 'utf8');
    
    // 更新构造函数或初始化部分
    // 在类的构造函数中添加固定的Rich Menu ID
    const constructorPattern = /constructor\(client, db\) {[\s\S]*?}/;
    const constructorMatch = lineBotContent.match(constructorPattern);
    
    if (constructorMatch) {
      const newConstructor = `constructor(client, db) {
    this.client = client;
    this.db = db;
    this.channelId = lineConfig.channelId;
    
    // 固定的Rich Menu ID (由脚本自动更新)
    this.mainRichMenuId = '${mainMenuId}';
    this.processingRichMenuId = '${processingMenuId}';
  }`;
      
      lineBotContent = lineBotContent.replace(constructorMatch[0], newConstructor);
      console.log('✅ 已更新构造函数中的Rich Menu ID');
    }
    
    // 写回文件
    fs.writeFileSync(lineBotPath, lineBotContent, 'utf8');
    console.log('✅ line-bot.js更新完成');
    
    // 创建一个配置文件，存储Rich Menu ID
    const configPath = path.join(__dirname, '../config/richmenu-ids.json');
    const richMenuConfig = {
      mainRichMenuId: mainMenuId,
      processingRichMenuId: processingMenuId,
      updatedAt: new Date().toISOString(),
      note: 'This file is automatically generated by update-richmenu-ids.js'
    };
    
    fs.writeFileSync(configPath, JSON.stringify(richMenuConfig, null, 2), 'utf8');
    console.log('✅ Rich Menu配置文件已创建:', configPath);
    
    console.log('\n🎉 Rich Menu ID更新完成！');
    console.log('');
    console.log('📋 更新结果:');
    console.log(`主菜单ID: ${mainMenuId}`);
    console.log(`处理中菜单ID: ${processingMenuId}`);
    console.log('');
    console.log('✨ 现在代码将使用正确的Rich Menu ID进行切换！');
    
    return {
      mainMenuId,
      processingMenuId
    };
    
  } catch (error) {
    console.error('❌ 更新Rich Menu ID失败:', error.message);
    
    if (error.response) {
      console.error('📊 API错误状态:', error.response.status);
      console.error('📋 API错误详情:', error.response.data);
    }
  }
}

// 显示帮助信息
function showHelp() {
  console.log(`
🔄 Rich Menu ID更新工具

功能：
- 获取当前所有Rich Menu的ID
- 更新代码中的Rich Menu ID引用
- 创建Rich Menu配置文件
- 确保代码使用正确的菜单ID

使用方法：
  node scripts/update-richmenu-ids.js

更新内容：
- services/line-bot.js: 构造函数中的菜单ID
- config/richmenu-ids.json: 菜单ID配置文件

注意事项：
- 需要先创建Rich Menu
- 会自动识别Main和Processing菜单
- 备份重要文件再运行
`);
}

if (require.main === module) {
  if (process.argv.includes('--help') || process.argv.includes('-h')) {
    showHelp();
  } else {
    updateRichMenuIds()
      .then(result => {
        if (result) {
          console.log('🎯 Rich Menu ID更新成功！');
        }
      })
      .catch(error => {
        console.error('💥 更新过程中发生错误');
        process.exit(1);
      });
  }
}

module.exports = updateRichMenuIds; 